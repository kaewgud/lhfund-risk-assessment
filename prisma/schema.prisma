// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  role          Role         @default(USER)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Assessment    Assessment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Assessment {
  id          String    @id @default(cuid())
  userId      String?
  point       Int
  riskLevelId String
  riskLevel   RiskLevel @relation(fields: [riskLevelId], references: [id])
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id      String   @id @default(cuid())
  text    String
  choices Choice[]
}

model Choice {
  id         String   @id @default(cuid())
  text       String
  point      Int
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model FundType {
  id           String         @id @default(cuid())
  name         String
  description  String?
  mutualFunds  MutualFund[]
  RepresentMap RepresentMap[]
}

model MonthlyPrice {
  id            String     @id @default(cuid())
  dateTimestamp DateTime
  cost          Float
  mutualFund    MutualFund @relation(fields: [mutualFundId], references: [id])
  mutualFundId  String
}

model MutualFund {
  id           String         @id @default(cuid())
  name         String
  description  String?
  fundTypeId   String
  fundType     FundType       @relation(fields: [fundTypeId], references: [id])
  Ratio        Ratio[]
  MonthlyPrice MonthlyPrice[]
  RepresentMap RepresentMap[]
}

model RiskLevel {
  id          String       @id @default(cuid())
  name        String
  description String?
  level       Int
  ratios      Ratio[]
  Assessment  Assessment[]
}

model Ratio {
  id           String     @id @default(cuid())
  name         String
  riskLevel    RiskLevel  @relation(fields: [riskLevelId], references: [id])
  riskLevelId  String
  percentage   Int
  mutualFundId String
  mutualFund   MutualFund @relation(fields: [mutualFundId], references: [id])
}

model RepresentMap {
  id           String     @id @default(cuid())
  fundTypeId   String
  fundType     FundType   @relation(fields: [fundTypeId], references: [id])
  mutualFundId String
  mutualFund   MutualFund @relation(fields: [mutualFundId], references: [id])
}
